<h1>Control de Usuarios</h1>

<!-- Contenedor 1: Asignaciones -->
<div id="contenedor-1" class="contenedor">
  <h2>Asignaciones</h2>
  
  <%= form_with url: dashboard_guardar_asignacion_path, local: true, id: 'asignacion-form' do |f| %>
    <div class="form-group">
      <%= label_tag :estudiante_id, "Estudiante" %>
      <div class="relative" style="position: relative;">
        <input type="text" id="estudiante-search" placeholder="Buscar estudiante..." class="form-control">
        <input type="hidden" id="estudiante_id" name="asignacion[estudiante_id]">
        <div id="estudiante-suggestions" style="position: absolute; top: 100%; left: 0; width: 150px; background: white; border: 1px solid #ddd; border-top: none; border-radius: 0 0 4px 4px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); z-index: 9999; max-height: 200px; overflow-y: auto; display: none;"></div>
      </div>
    </div>

    <div class="form-group">
      <%= label_tag :curso_id, "Curso" %>
      <%= select_tag :curso_id, options_from_collection_for_select(@cursos, :id, :nombre), prompt: "Selecciona un curso", class: "form-control", name: "asignacion[curso_id]" %>
    </div>

    <div class="form-group">
      <%= label_tag :nota, "Nota" %>
      <%= number_field_tag :nota, 0, class: "form-control", name: "asignacion[nota]", min: 0, max: 100 %>
    </div>

    <%= submit_tag "Guardar", class: "btn btn-primary" %>
  <% end %>

  <hr>

  <h3>Asignaciones registradas</h3>
  <table id="asignaciones-table" border="1" cellpadding="6" cellspacing="0">
    <thead>
      <tr>
        <th>Estudiante</th>
        <th>Curso</th>
        <th>Nota</th>
        <th>Acciones</th>
      </tr>
    </thead>
    <tbody>
      <% @asignaciones.each do |a| %>
        <tr data-id="<%= a.id %>" data-estudiante_id="<%= a.estudiante_id %>" data-curso_id="<%= a.curso_id %>" data-nota="<%= a.nota %>">
          <td><%= a.estudiante&.nombre_completo %></td>
          <td><%= a.curso&.nombre %></td>
          <td><%= a.nota %></td>
          <td>
            <button class="btn-edit-asignacion" type="button">Modificar</button>
            <button class="btn-delete-asignacion" type="button">Eliminar</button>
          </td>
        </tr>
      <% end %>
    </tbody>
  </table>
</div>

<!-- Contenedor 2: Gestión de Cursos y Profesores -->
<div id="contenedor-2" class="contenedor">
  <h2>Gestión de Cursos y Profesores</h2>
  
  <!-- Sección 1: Cursos -->
  <div class="seccion-cursos">
    <h3>Cursos</h3>
    
    <%= form_with url: dashboard_guardar_curso_path, local: true, id: 'curso-form' do |f| %>
      <div class="form-group">
        <%= label_tag :nombre, "Nombre del Curso" %>
        <%= text_field_tag :nombre, nil, class: "form-control", name: "curso[nombre]", placeholder: "Ingrese el nombre del curso" %>
      </div>

      <div class="form-group">
        <%= label_tag :profesor_id, "Profesor" %>
        <%= select_tag :profesor_id, options_from_collection_for_select(@profesores, :id, :nombre), prompt: "Selecciona un profesor", class: "form-control", name: "curso[profesor_id]" %>
      </div>

      <%= submit_tag "Guardar", class: "btn btn-primary" %>
    <% end %>

    <hr>

    <h4>Lista de Cursos</h4>
    <table id="cursos-table" border="1" cellpadding="6" cellspacing="0">
      <thead>
        <tr>
          <th>Nombre</th>
          <th>Profesor</th>
          <th>Acciones</th>
        </tr>
      </thead>
      <tbody>
        <% @cursos.each do |curso| %>
          <tr data-id="<%= curso.id %>" data-nombre="<%= curso.nombre %>" data-profesor_id="<%= curso.profesor_id %>">
            <td><%= curso.nombre %></td>
            <td><%= curso.profesor&.nombre %></td>
            <td>
              <button class="btn-edit-curso" type="button">Modificar</button>
              <button class="btn-delete-curso" type="button">Eliminar</button>
            </td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>

  <hr>

  <!-- Sección 2: Profesores -->
  <div class="seccion-profesores">
    <h3>Profesores</h3>
    
    <%= form_with url: dashboard_guardar_profesor_path, local: true, id: 'profesor-form' do |f| %>
      <div class="form-group">
        <%= label_tag :nombre, "Nombre del Profesor" %>
        <%= text_field_tag :nombre, nil, class: "form-control", name: "profesor[nombre]", placeholder: "Ingrese el nombre del profesor" %>
      </div>

      <div class="form-group">
        <%= label_tag :telefono, "Teléfono" %>
        <%= text_field_tag :telefono, nil, class: "form-control", name: "profesor[telefono]", placeholder: "Ingrese el teléfono" %>
      </div>

      <%= submit_tag "Guardar", class: "btn btn-primary" %>
    <% end %>

    <hr>

    <h4>Lista de Profesores</h4>
    <table id="profesores-table" border="1" cellpadding="6" cellspacing="0">
      <thead>
        <tr>
          <th>Nombre</th>
          <th>Teléfono</th>
          <th>Acciones</th>
        </tr>
      </thead>
      <tbody>
        <% @profesores.each do |profesor| %>
          <tr data-id="<%= profesor.id %>" data-nombre="<%= profesor.nombre %>" data-telefono="<%= profesor.telefono %>">
            <td><%= profesor.nombre %></td>
            <td><%= profesor.telefono %></td>
            <td>
              <button class="btn-edit-profesor" type="button">Modificar</button>
              <button class="btn-delete-profesor" type="button">Eliminar</button>
            </td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const estudianteSearch = document.getElementById('estudiante-search');
    const estudianteId = document.getElementById('estudiante_id');
    const suggestions = document.getElementById('estudiante-suggestions');
    const asignacionesTable = document.getElementById('asignaciones-table');

    // Typeahead para estudiantes
    if (estudianteSearch) {
      estudianteSearch.addEventListener('input', function() {
        const query = this.value.trim();
        if (query.length < 2) {
          suggestions.innerHTML = '';
          return;
        }

        fetch(`/dashboard/buscar_estudiantes?q=${encodeURIComponent(query)}`, {
          headers: { 'Accept': 'application/json' }
        })
        .then(response => response.json())
        .then(data => {
          suggestions.innerHTML = '';
          if (data.estudiantes && data.estudiantes.length > 0) {
            data.estudiantes.forEach(estudiante => {
              const div = document.createElement('div');
              div.style.cssText = 'padding: 10px 12px; cursor: pointer; border-bottom: 1px solid #eee; background: white;';
              div.textContent = `${estudiante.nombre_completo} - ${estudiante.grado_nombre || 'Sin grado'}`;
              div.dataset.id = estudiante.id;
              div.addEventListener('mouseenter', function() {
                this.style.backgroundColor = '#f8f9fa';
              });
              div.addEventListener('mouseleave', function() {
                this.style.backgroundColor = 'white';
              });
              div.addEventListener('click', function() {
                estudianteSearch.value = estudiante.nombre_completo;
                estudianteId.value = estudiante.id;
                suggestions.style.display = 'none';
              });
              suggestions.appendChild(div);
            });
            suggestions.style.display = 'block';
          } else {
            suggestions.style.display = 'none';
          }
        })
        .catch(error => console.error('Error:', error));
      });

      // Ocultar sugerencias al hacer click fuera
      document.addEventListener('click', function(e) {
        if (!e.target.closest('.relative')) {
          suggestions.style.display = 'none';
        }
      });
    }

    // Filtrar tabla de asignaciones al seleccionar estudiante
    if (estudianteId && asignacionesTable) {
      estudianteId.addEventListener('change', function() {
        const estudianteIdValue = this.value;
        const rows = asignacionesTable.querySelectorAll('tbody tr');
        
        rows.forEach(row => {
          if (estudianteIdValue === '' || row.dataset.estudiante_id === estudianteIdValue) {
            row.style.display = '';
          } else {
            row.style.display = 'none';
          }
        });
      });
    }

    // Función para attach handlers
    function attachAsignacionHandlers(row) {
      const editBtn = row.querySelector('.btn-edit-asignacion');
      const deleteBtn = row.querySelector('.btn-delete-asignacion');

      if (editBtn) {
        editBtn.addEventListener('click', function(e) {
          e.stopPropagation();
          const asignacionId = row.dataset.id;
          const estudianteId = row.dataset.estudiante_id;
          const cursoId = row.dataset.curso_id;
          const nota = row.dataset.nota;

          // Rellenar formulario
          const form = document.getElementById('asignacion-form');
          if (form) {
            const estudianteSearch = form.querySelector('#estudiante-search');
            const estudianteIdField = form.querySelector('#estudiante_id');
            const cursoSelect = form.querySelector('select[name="asignacion[curso_id]"]');
            const notaInput = form.querySelector('input[name="asignacion[nota]"]');

          if (estudianteSearch) estudianteSearch.value = row.querySelector('td:nth-child(1)').textContent;
          if (estudianteIdField) estudianteIdField.value = estudianteId;
            if (cursoSelect) cursoSelect.value = cursoId;
            if (notaInput) notaInput.value = nota;

            // Agregar campo hidden para ID
            let idField = form.querySelector('input[name="asignacion[id]"]');
            if (!idField) {
              idField = document.createElement('input');
              idField.type = 'hidden';
              idField.name = 'asignacion[id]';
              form.appendChild(idField);
            }
            idField.value = asignacionId;

            // Cambiar texto del botón
            const submitBtn = form.querySelector('input[type="submit"]');
            if (submitBtn) submitBtn.value = 'Actualizar';
          }
        });
      }

      if (deleteBtn) {
        deleteBtn.addEventListener('click', function(e) {
          e.stopPropagation();
          const asignacionId = row.dataset.id;
          
          if (!confirm('¿Eliminar esta asignación?')) return;
          
          fetch(`/asignacion_cursos/${asignacionId}`, {
            method: 'DELETE',
            headers: { 'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content') }
          })
          .then(response => {
            if (response.ok) {
              row.remove();
            } else {
              alert('Error al eliminar la asignación');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('Error al eliminar la asignación');
          });
        });
      }
    }

    // Attach handlers to existing rows
    document.querySelectorAll('#asignaciones-table tbody tr').forEach(attachAsignacionHandlers);

    // Interceptar submit del formulario
    const asignacionForm = document.getElementById('asignacion-form');
    if (asignacionForm) {
      asignacionForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = new FormData(asignacionForm);
        const asignacionId = formData.get('asignacion[id]');
        const url = asignacionId ? `/asignacion_cursos/${asignacionId}` : asignacionForm.action;
        const method = asignacionId ? 'PATCH' : 'POST';

        fetch(url, {
          method: method,
          headers: { 'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content') },
          body: formData
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            if (asignacionId) {
              // Actualizar fila existente
              const row = document.querySelector(`#asignaciones-table tbody tr[data-id="${asignacionId}"]`);
              if (row) {
                row.dataset.estudiante_id = data.asignacion.estudiante_id;
                row.dataset.curso_id = data.asignacion.curso_id;
                row.dataset.nota = data.asignacion.nota;
                row.querySelector('td:nth-child(1)').textContent = data.asignacion.estudiante_nombre;
                row.querySelector('td:nth-child(2)').textContent = data.asignacion.curso_nombre;
                row.querySelector('td:nth-child(3)').textContent = data.asignacion.nota;
              }
            } else {
              // Agregar nueva fila
              const tbody = document.querySelector('#asignaciones-table tbody');
              const tr = document.createElement('tr');
              tr.dataset.id = data.asignacion.id;
              tr.dataset.estudiante_id = data.asignacion.estudiante_id;
              tr.dataset.curso_id = data.asignacion.curso_id;
              tr.dataset.nota = data.asignacion.nota;
              tr.innerHTML = `<td>${data.asignacion.estudiante_nombre}</td>
                              <td>${data.asignacion.curso_nombre}</td>
                              <td>${data.asignacion.nota}</td>
                              <td><button class="btn-edit-asignacion" type="button">Modificar</button> <button class="btn-delete-asignacion" type="button">Eliminar</button></td>`;
              tbody.appendChild(tr);
              
              // Reattach event handlers for new buttons
              attachAsignacionHandlers(tr);
            }

            // Reset form
            asignacionForm.reset();
            const idField = asignacionForm.querySelector('input[name="asignacion[id]"]');
            if (idField) idField.remove();
            const submitBtn = asignacionForm.querySelector('input[type="submit"]');
            if (submitBtn) submitBtn.value = 'Guardar';
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error al guardar la asignación');
        });
      });
    }

    // ===== FUNCIONALIDAD PARA CURSOS =====
    
    // Función para attach handlers de cursos
    function attachCursoHandlers(row) {
      const editBtn = row.querySelector('.btn-edit-curso');
      const deleteBtn = row.querySelector('.btn-delete-curso');

      if (editBtn) {
        editBtn.addEventListener('click', function(e) {
          e.stopPropagation();
          const cursoId = row.dataset.id;
          const nombre = row.dataset.nombre;
          const profesorId = row.dataset.profesor_id;

          // Rellenar formulario de cursos
          const form = document.getElementById('curso-form');
          if (form) {
            const nombreInput = form.querySelector('input[name="curso[nombre]"]');
            const profesorSelect = form.querySelector('select[name="curso[profesor_id]"]');

            if (nombreInput) nombreInput.value = nombre;
            if (profesorSelect) profesorSelect.value = profesorId;

            // Agregar campo hidden para ID
            let idField = form.querySelector('input[name="curso[id]"]');
            if (!idField) {
              idField = document.createElement('input');
              idField.type = 'hidden';
              idField.name = 'curso[id]';
              form.appendChild(idField);
            }
            idField.value = cursoId;

            // Cambiar texto del botón
            const submitBtn = form.querySelector('input[type="submit"]');
            if (submitBtn) submitBtn.value = 'Actualizar';
          }
        });
      }

      if (deleteBtn) {
        deleteBtn.addEventListener('click', function(e) {
          e.stopPropagation();
          const cursoId = row.dataset.id;
          
          if (!confirm('¿Eliminar este curso?')) return;
          
          fetch(`/cursos/${cursoId}`, {
            method: 'DELETE',
            headers: { 'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content') },
            credentials: 'same-origin'
          })
          .then(response => {
            if (response.ok) {
              row.remove();
            } else {
              alert('Error al eliminar el curso');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('Error al eliminar el curso');
          });
        });
      }
    }

    // Función para attach handlers de profesores
    function attachProfesorHandlers(row) {
      const editBtn = row.querySelector('.btn-edit-profesor');
      const deleteBtn = row.querySelector('.btn-delete-profesor');

      if (editBtn) {
        editBtn.addEventListener('click', function(e) {
          e.stopPropagation();
          const profesorId = row.dataset.id;
          const nombre = row.dataset.nombre;
          const telefono = row.dataset.telefono;

          // Rellenar formulario de profesores
          const form = document.getElementById('profesor-form');
          if (form) {
            const nombreInput = form.querySelector('input[name="profesor[nombre]"]');
            const telefonoInput = form.querySelector('input[name="profesor[telefono]"]');

            if (nombreInput) nombreInput.value = nombre;
            if (telefonoInput) telefonoInput.value = telefono;

            // Agregar campo hidden para ID
            let idField = form.querySelector('input[name="profesor[id]"]');
            if (!idField) {
              idField = document.createElement('input');
              idField.type = 'hidden';
              idField.name = 'profesor[id]';
              form.appendChild(idField);
            }
            idField.value = profesorId;

            // Cambiar texto del botón
            const submitBtn = form.querySelector('input[type="submit"]');
            if (submitBtn) submitBtn.value = 'Actualizar';
          }
        });
      }

      if (deleteBtn) {
        deleteBtn.addEventListener('click', function(e) {
          e.stopPropagation();
          const profesorId = row.dataset.id;
          
          if (!confirm('¿Eliminar este profesor?')) return;
          
          fetch(`/profesores/${profesorId}`, {
            method: 'DELETE',
            headers: { 'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content') },
            credentials: 'same-origin'
          })
          .then(response => {
            if (response.ok) {
              row.remove();
            } else {
              alert('Error al eliminar el profesor');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('Error al eliminar el profesor');
          });
        });
      }
    }

    // Attach handlers to existing curso rows
    document.querySelectorAll('#cursos-table tbody tr').forEach(attachCursoHandlers);
    
    // Attach handlers to existing profesor rows
    document.querySelectorAll('#profesores-table tbody tr').forEach(attachProfesorHandlers);

    // Interceptar submit del formulario de cursos
    const cursoForm = document.getElementById('curso-form');
    if (cursoForm) {
      cursoForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = new FormData(cursoForm);
        const cursoId = formData.get('curso[id]');
        const url = cursoId ? `/cursos/${cursoId}` : cursoForm.action;
        const method = cursoId ? 'PATCH' : 'POST';

        fetch(url, {
          method: method,
          headers: { 
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({
            curso: {
              nombre: formData.get('curso[nombre]'),
              profesor_id: formData.get('curso[profesor_id]'),
              id: formData.get('curso[id]')
            }
          }),
          credentials: 'same-origin'
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            if (cursoId) {
              // Actualizar fila existente
              const row = document.querySelector(`#cursos-table tbody tr[data-id="${cursoId}"]`);
              if (row) {
                row.dataset.nombre = data.curso.nombre;
                row.dataset.profesor_id = data.curso.profesor_id;
                row.querySelector('td:nth-child(1)').textContent = data.curso.nombre;
                row.querySelector('td:nth-child(2)').textContent = data.curso.profesor_nombre;
              }
            } else {
              // Agregar nueva fila
              const tbody = document.querySelector('#cursos-table tbody');
              const tr = document.createElement('tr');
              tr.dataset.id = data.curso.id;
              tr.dataset.nombre = data.curso.nombre;
              tr.dataset.profesor_id = data.curso.profesor_id;
              tr.innerHTML = `<td>${data.curso.nombre}</td>
                              <td>${data.curso.profesor_nombre}</td>
                              <td><button class="btn-edit-curso" type="button">Modificar</button> <button class="btn-delete-curso" type="button">Eliminar</button></td>`;
              tbody.appendChild(tr);
              
              // Reattach event handlers for new buttons
              attachCursoHandlers(tr);
            }

            // Reset form
            cursoForm.reset();
            const idField = cursoForm.querySelector('input[name="curso[id]"]');
            if (idField) idField.remove();
            const submitBtn = cursoForm.querySelector('input[type="submit"]');
            if (submitBtn) submitBtn.value = 'Guardar';
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error al guardar el curso');
        });
      });
    }

    // Interceptar submit del formulario de profesores
    const profesorForm = document.getElementById('profesor-form');
    if (profesorForm) {
      profesorForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = new FormData(profesorForm);
        const profesorId = formData.get('profesor[id]');
        const url = profesorId ? `/profesores/${profesorId}` : profesorForm.action;
        const method = profesorId ? 'PATCH' : 'POST';

        fetch(url, {
          method: method,
          headers: { 
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({
            profesor: {
              nombre: formData.get('profesor[nombre]'),
              telefono: formData.get('profesor[telefono]'),
              id: formData.get('profesor[id]')
            }
          }),
          credentials: 'same-origin'
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            if (profesorId) {
              // Actualizar fila existente
              const row = document.querySelector(`#profesores-table tbody tr[data-id="${profesorId}"]`);
              if (row) {
                row.dataset.nombre = data.profesor.nombre;
                row.dataset.telefono = data.profesor.telefono;
                row.querySelector('td:nth-child(1)').textContent = data.profesor.nombre;
                row.querySelector('td:nth-child(2)').textContent = data.profesor.telefono;
              }
            } else {
              // Agregar nueva fila
              const tbody = document.querySelector('#profesores-table tbody');
              const tr = document.createElement('tr');
              tr.dataset.id = data.profesor.id;
              tr.dataset.nombre = data.profesor.nombre;
              tr.dataset.telefono = data.profesor.telefono;
              tr.innerHTML = `<td>${data.profesor.nombre}</td>
                              <td>${data.profesor.telefono}</td>
                              <td><button class="btn-edit-profesor" type="button">Modificar</button> <button class="btn-delete-profesor" type="button">Eliminar</button></td>`;
              tbody.appendChild(tr);
              
              // Reattach event handlers for new buttons
              attachProfesorHandlers(tr);
            }

            // Reset form
            profesorForm.reset();
            const idField = profesorForm.querySelector('input[name="profesor[id]"]');
            if (idField) idField.remove();
            const submitBtn = profesorForm.querySelector('input[type="submit"]');
            if (submitBtn) submitBtn.value = 'Guardar';
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error al guardar el profesor');
        });
      });
    }
  });
</script>
